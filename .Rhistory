pml_CSV <- pml_csv[,-1] # Remove the first column that represents a ID Row
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_csv[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
View(pml_CSV)
inTrain = createDataPartition(pml_CSV$classe, p=0.60, list=FALSE)
View(inTrain)
View(pml_CSV)
View(inTrain)
training = pml_CSV[inTrain,]
validating = pml_CSV[-inTrain,]
View(training)
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
validating <- validating[,Keep]
View(training)
model <- randomForest(classe~.,data=training)
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
fileSource <-"pml-testing.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
Testing <- validating # Initiate Testing data frame and obligate pml_CSV coerce data.
View(pml_CSV)
View(pml_CSV)
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
Testing <- pml_CSV[,Keep]
View(Testing)
View(training)
Testing <- Testing[,-ncol(Testing)]
predictions <- predict(model,newdata=Testing)
View(Testing)
View(training)
names(Testing)==names(training)
names(training)
names(Testing[,59]) <- "classe"
Testing$classe <- null
Testing$classe <- ''
predictions <- predict(model,newdata=Testing)
class(Testing)
class(Testing[,])
class(Testing[,1])
class(Testing[,1:59])
1:3
rapply(Testing, names)
sapply(Testing, names)
sapply(Testing, class)
sapply(Testing, class) == sapply(training, class)
class(trainning$magnet_dumbbell_z)
class(trainning$magnet_dumbbell_z)
class(training$magnet_dumbbell_z)
class(Testing$magnet_dumbbell_z)
class(Testing$magnet_forearm_y)
class(Testing$magnet_forearm_y)
class(Testing$magnet_forearm_z)
class(training$magnet_forearm_z)
class(Testing$magnet_forearm_z) <- "numeric"
class(training$magnet_forearm_z)
class(Testing$magnet_forearm_z)
as.numeric(Testing$magnet_forearm_z)
class(Testing$magnet_forearm_z)
Testing$magnet_forearm_z <- as.numeric(Testing$magnet_forearm_z)
class(Testing$magnet_forearm_z)
class_check <- sapply(Testing, class) == sapply(training, class)
class_check
class_check <- FALSE==(sapply(Testing, class) == sapply(training, class))
class_check
class_check <- (sapply(Testing, class) == sapply(training, class))
class_check
class(Testing[,!class_check ])
Testing[,!class_check ]
sapply(Testing[,!class_check ])
sapply(Testing[,!class_check ], class)
sapply(trainnig[,!class_check ], class)
sapply(trainig[,!class_check ], class)
sapply(training[,!class_check ], class)
Testing <- Testing[,-ncol(Testing)]
class_check <- (sapply(Testing, class) == sapply(training, class))
sapply(Testing[,!class_check ], class)
sapply(training[,!class_check ], class)
sapply(Testing[,!class_check ], as(sapply(training[,!class_check ], class))
as.numeric(Testing$magnet_forearm_z))
as(Testing[,!class_check ], sapply(trainig[,!class_check ], class))
train_class <- sapply(trainig[,!class_check ], class)
train_class <- sapply(training[,!class_check ], class)
as(Testing[,!class_check ], sapply(training[,!class_check ], class)))
as(Testing[,!class_check ], sapply(training[,!class_check ], class))
as(Testing[,!class_check ], train_class)
as(Testing[,!class_check ], Class=train_class)
sapply(Testing[,!class_check ], as, Class=train_class)
sapply(Testing, class)
train_class <- sapply(training[,!class_check ], class)
train_class
Testing[,class_check]
Testing(class_check)
Testing(class_check)
Testing[class_check]
Testing[, class_check]
Testing[, names(class_check)]
names(class_check)
Testing[, !class_check]
sapply(Testing[, !class_check], as, Class = "numeric")
sapply(Testing, class)
Testing[, !class_check] <- sapply(Testing[, !class_check], as, Class = "numeric")
sapply(Testing, class)
Testing[, !class_check] <- sapply(Testing[, !class_check], as, Class = "numeric")
class_check <- (sapply(Testing, class) == sapply(training, class))
class_check
!class_check
Testing[, !class_check] <- sapply(Testing[, !class_check], as.numeric)
class_check <- (sapply(Testing, class) == sapply(training, class))
sapply(Testing, class)
!class_check
predictions <- predict(model,newdata=Testing)
class_check <- (sapply(Testing, class) == sapply(training, class))
class_check
predictions <- predict(model,newdata=Testing)
class(Testing)
class(training)
model <- randomForest(classe~.,data=training)
predictions <- predict(model,newdata=Testing)
sapply(Testing, class) == sapply(training, class)
predictions <- predict(model,newdata=validating)
predictions <- predict(model,newdata=Testing)
sapply(Testing, class) == sapply(validating, class)
(sapply(Testing, names) == sapply(training, names))
names(Testing) == names(training)
View(Testing)
View(Testing)
View(training)
View(Testing)
View(training)
inTesting = createDataPartition(pml_CSV$classe, p=1, list=FALSE)
predictions <- predict(model,newdata=Testing)
tet <- training[4:7,]
predictions <- predict(model,newdata=tet)
tet <- training[4:7,] + Testing
tet <- training[4:7, -59] + Testing
tet <- rbind(training[4:7, -59] , Testing)
predictions <- predict(model,newdata=tet)
tet <- rbind(training[1, -59] , Testing)
predictions <- predict(model,newdata=tet)
testing <- rbind(training[1, -59] , Testing)
predictions <- predict(model,newdata=testing[-1,])
Print(predictions)
print(predictions)
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
pml_CSV <- pml_CSV[,Keep] # Keep the same columns of testing dataset
# class_check <- (sapply(pml_CSV, class) == sapply(training, class))
# Testing[, !class_check] <- sapply(Testing[, !class_check], as.numeric)
testing <- rbind(training[1, -59] , pml_csv)
testing <- rbind(training[1, -59] , pml_CSV)
predictions <- predict(model,newdata=testing[-1,])
print(predictions)
testing <- rbind(training[0, -59] , pml_CSV) # Coerce testing dataset to same class and strucuture of training dataset
predictions <- predict(model,newdata=testing)
testing <- rbind(training[1, -59] , pml_CSV) # Coerce testing dataset to same class and strucuture of training dataset
predictions <- predict(model,newdata=testing[-1,])
print(predictions)
x <- rbid(x, 3:4)
x <- rbind(x, 3:4)
x
x <- 1:2
x
x <- rbind(x, 3:4)
x
x[-1,]
library(ElemStatLearn)
library(caret)
library(rpart)
library(randomForest)
set.seed(357)
check_file_exist <- function(file_path)
{
if (!file.exists(file_path))
stop("The ", file_path, " not found!") else TRUE
}
load_data <- function(data_dir , fileURL, fileSource)
{
# Dataset check and load
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/","activity.csv", sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
data <- read.csv(txt_file,
header=TRUE,  na.strings=c("NA",""))
data$interval <- factor(data$interval)
data$date <- as.Date(data$date, format="%Y-%m-%d")
data
}
data_dir <- "C:/Users/Marcelo/PML_PA/Data";
if (!file.exists(data_dir)){
# data_dir <- readline(prompt = "Please, inform your data directory path: ")
data_dir <-"C:/Users/Marcelo/PML_PA/Data" ## simulate a valid data entry just because we use a Rmd
if (!file.exists(data_dir)){
stop("You inform a invalid directory path")
}
}
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileSource <-"pml-training.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
inTrain = createDataPartition(pml_CSV$classe, p=0.60, list=FALSE)
training = pml_CSV[inTrain,]
validating = pml_CSV[-inTrain,]
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
validating <- validating[,Keep]
model <- randomForest(classe~.,data=training)
print(model)
importance(model)
confusionMatrix(predict(model,newdata=validating[,-ncol(validating)]),validating$classe)
accurancy<-c(as.numeric(predict(model,newdata=validating[,-ncol(validating)])==validating$classe))
accurancy<-sum(accurancy)*100/nrow(validating)
accurancy
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
fileSource <-"pml-testing.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
pml_CSV <- pml_CSV[,Keep] # Keep the same columns of testing dataset
# class_check <- (sapply(pml_CSV, class) == sapply(training, class))
# pml_CSV[, !class_check] <- sapply(pml_CSV[, !class_check], as.numeric)
testing <- rbind(training[1, -59] , pml_CSV) # Coerce testing dataset to same class and strucuture of training dataset
predictions <- predict(model,newdata=testing[-1,])
print(predictions)
pml_CSV <- pml_CSV[,Keep] # Keep the same columns of testing dataset
Keep
pml_CSV <- pml_CSV[,Keep]
pml_CSV[ , Keep]
Keep
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[ , Keep] # Keep the same columns of testing dataset
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[ , Keep] # Keep the same columns of testing dataset
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
View(pml_CSV)
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[ , Keep] # Keep the same columns of testing dataset
View(pml_CSV)
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
View(pml_CSV)
testing <- rbind(training[1, -59] , pml_CSV)
View(pml_CSV)
View(testing)
library(ElemStatLearn)
library(caret)
library(rpart)
library(randomForest)
set.seed(357)
check_file_exist <- function(file_path)
{
if (!file.exists(file_path))
stop("The ", file_path, " not found!") else TRUE
}
load_data <- function(data_dir , fileURL, fileSource)
{
# Dataset check and load
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/","activity.csv", sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
data <- read.csv(txt_file,
header=TRUE,  na.strings=c("NA",""))
data$interval <- factor(data$interval)
data$date <- as.Date(data$date, format="%Y-%m-%d")
data
}
data_dir <- "C:/Users/Marcelo/PML_PA/Data";
if (!file.exists(data_dir)){
# data_dir <- readline(prompt = "Please, inform your data directory path: ")
data_dir <-"C:/Users/Marcelo/PML_PA/Data" ## simulate a valid data entry just because we use a Rmd
if (!file.exists(data_dir)){
stop("You inform a invalid directory path")
}
}
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileSource <-"pml-training.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
inTrain = createDataPartition(pml_CSV$classe, p=0.60, list=FALSE)
training = pml_CSV[inTrain,]
validating = pml_CSV[-inTrain,]
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
validating <- validating[,Keep]
model <- randomForest(classe~.,data=training)
print(model)
importance(model)
confusionMatrix(predict(model,newdata=validating[,-ncol(validating)]),validating$classe)
accurancy<-c(as.numeric(predict(model,newdata=validating[,-ncol(validating)])==validating$classe))
accurancy<-sum(accurancy)*100/nrow(validating)
accurancy
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
fileSource <-"pml-testing.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
pml_CSV <- pml_CSV[,Keep] # Keep the same columns of testing dataset
# class_check <- (sapply(pml_CSV, class) == sapply(training, class))
# pml_CSV[, !class_check] <- sapply(pml_CSV[, !class_check], as.numeric)
testing <- rbind(training[1, -59] , pml_CSV) # Coerce testing dataset to same class and strucuture of training dataset
predictions <- predict(model,newdata=testing[-1,])
print(predictions)
library(ElemStatLearn)
library(caret)
library(rpart)
library(randomForest)
set.seed(357)
check_file_exist <- function(file_path)
{
if (!file.exists(file_path))
stop("The ", file_path, " not found!") else TRUE
}
load_data <- function(data_dir , fileURL, fileSource)
{
# Dataset check and load
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/","activity.csv", sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
data <- read.csv(txt_file,
header=TRUE,  na.strings=c("NA",""))
data$interval <- factor(data$interval)
data$date <- as.Date(data$date, format="%Y-%m-%d")
data
}
data_dir <- "C:/Users/Marcelo/PML_PA/Data";
if (!file.exists(data_dir)){
# data_dir <- readline(prompt = "Please, inform your data directory path: ")
data_dir <-"C:/Users/Marcelo/PML_PA/Data" ## simulate a valid data entry just because we use a Rmd
if (!file.exists(data_dir)){
stop("You inform a invalid directory path")
}
}
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileSource <-"pml-training.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
inTrain = createDataPartition(pml_CSV$classe, p=0.60, list=FALSE)
training = pml_CSV[inTrain,]
validating = pml_CSV[-inTrain,]
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
validating <- validating[,Keep]
model <- randomForest(classe~.,data=training)
print(model)
importance(model)
confusionMatrix(predict(model,newdata=validating[,-ncol(validating)]),validating$classe)
accurancy<-c(as.numeric(predict(model,newdata=validating[,-ncol(validating)])==validating$classe))
accurancy<-sum(accurancy)*100/nrow(validating)
accurancy
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
fileSource <-"pml-testing.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
pml_CSV <- pml_CSV[,Keep] # Keep the same columns of testing dataset
# class_check <- (sapply(pml_CSV, class) == sapply(training, class))
# pml_CSV[, !class_check] <- sapply(pml_CSV[, !class_check], as.numeric)
testing <- rbind(training[1, -59] , pml_CSV) # Coerce testing dataset to same class and strucuture of training dataset
predictions <- predict(model,newdata=testing[-1,])
print(predictions)
library(ElemStatLearn)
library(caret)
library(rpart)
library(randomForest)
set.seed(357)
check_file_exist <- function(file_path)
{
if (!file.exists(file_path))
stop("The ", file_path, " not found!") else TRUE
}
load_data <- function(data_dir , fileURL, fileSource)
{
# Dataset check and load
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/","activity.csv", sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
data <- read.csv(txt_file,
header=TRUE,  na.strings=c("NA",""))
data$interval <- factor(data$interval)
data$date <- as.Date(data$date, format="%Y-%m-%d")
data
}
data_dir <- "C:/Users/Marcelo/PML_PA/Data";
if (!file.exists(data_dir)){
# data_dir <- readline(prompt = "Please, inform your data directory path: ")
data_dir <-"C:/Users/Marcelo/PML_PA/Data" ## simulate a valid data entry just because we use a Rmd
if (!file.exists(data_dir)){
stop("You inform a invalid directory path")
}
}
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileSource <-"pml-training.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
inTrain = createDataPartition(pml_CSV$classe, p=0.60, list=FALSE)
training = pml_CSV[inTrain,]
validating = pml_CSV[-inTrain,]
sum((colSums(!is.na(training[,-ncol(training)])) < 0.6*nrow(training)))
Keep <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,Keep]
validating <- validating[,Keep]
model <- randomForest(classe~.,data=training)
print(model)
importance(model)
confusionMatrix(predict(model,newdata=validating[,-ncol(validating)]),validating$classe)
accurancy<-c(as.numeric(predict(model,newdata=validating[,-ncol(validating)])==validating$classe))
accurancy<-sum(accurancy)*100/nrow(validating)
accurancy
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
fileSource <-"pml-testing.csv"
source_path <- paste(data_dir, "/", fileSource , sep="")
txt_file <- paste(data_dir, "/", fileSource, sep="")
if (!file.exists(txt_file)) {
message(paste("Please Wait! Download...", fileURL, "..."));
download.file(fileURL, destfile=source_path);
}
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
pml_CSV <- pml_CSV[,Keep] # Keep the same columns of testing dataset
# class_check <- (sapply(pml_CSV, class) == sapply(training, class))
# pml_CSV[, !class_check] <- sapply(pml_CSV[, !class_check], as.numeric)
testing <- rbind(training[1, -59] , pml_CSV) # Coerce testing dataset to same class and strucuture of training dataset
predictions <- predict(model,newdata=testing[-1,])
print(predictions)
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[ , Keep] # Keep the same columns of testing dataset
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
testing <- rbind(training[1, -59] , pml_CSV)
pml_CSV <- read.csv(txt_file, header=TRUE, sep=",", na.strings=c("NA",""))
pml_CSV <- pml_CSV[,-1] # Remove the first column that represents a ID Row
pml_CSV <- pml_CSV[ , Keep] # Keep the same columns of testing dataset
pml_CSV <- pml_CSV[,-ncol(pml_CSV)] # Remove the problem ID
testing <- rbind(training[1, -59] , pml_CSV)
predictions
names(predictions)
names(testing)
View(testing)
row.names(testing) <- 0:20
row.names(testing)
row.names(pml_CSV) <- c(100, 1:20)
row.names(testing) <- c(100, 1:20)
answers = rep("A", 20)
answers
install.packages("knitr")
install.packages("knitr", dependences=TRUE)
install.packages('knitr', dependencies = TRUE)
